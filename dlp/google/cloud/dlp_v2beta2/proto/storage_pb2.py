# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/privacy/dlp_v2beta2/proto/storage.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='google/cloud/privacy/dlp_v2beta2/proto/storage.proto',
  package='google.privacy.dlp.v2beta2',
  syntax='proto3',
  serialized_pb=_b('\n4google/cloud/privacy/dlp_v2beta2/proto/storage.proto\x12\x1agoogle.privacy.dlp.v2beta2\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x18\n\x08InfoType\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x8c\x03\n\x0e\x43ustomInfoType\x12\x37\n\tinfo_type\x18\x01 \x01(\x0b\x32$.google.privacy.dlp.v2beta2.InfoType\x12K\n\ndictionary\x18\x02 \x01(\x0b\x32\x35.google.privacy.dlp.v2beta2.CustomInfoType.DictionaryH\x00\x12R\n\x0esurrogate_type\x18\x04 \x01(\x0b\x32\x38.google.privacy.dlp.v2beta2.CustomInfoType.SurrogateTypeH\x00\x1a\x86\x01\n\nDictionary\x12S\n\tword_list\x18\x01 \x01(\x0b\x32>.google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.WordListH\x00\x1a\x19\n\x08WordList\x12\r\n\x05words\x18\x01 \x03(\tB\x08\n\x06source\x1a\x0f\n\rSurrogateTypeB\x06\n\x04type\"\x17\n\x07\x46ieldId\x12\x0c\n\x04name\x18\x01 \x01(\t\"7\n\x0bPartitionId\x12\x12\n\nproject_id\x18\x02 \x01(\t\x12\x14\n\x0cnamespace_id\x18\x04 \x01(\t\"\x1e\n\x0eKindExpression\x12\x0c\n\x04name\x18\x01 \x01(\t\"\x8b\x01\n\x10\x44\x61tastoreOptions\x12=\n\x0cpartition_id\x18\x01 \x01(\x0b\x32\'.google.privacy.dlp.v2beta2.PartitionId\x12\x38\n\x04kind\x18\x02 \x01(\x0b\x32*.google.privacy.dlp.v2beta2.KindExpression\"x\n\x13\x43loudStorageOptions\x12I\n\x08\x66ile_set\x18\x01 \x01(\x0b\x32\x37.google.privacy.dlp.v2beta2.CloudStorageOptions.FileSet\x1a\x16\n\x07\x46ileSet\x12\x0b\n\x03url\x18\x01 \x01(\t\"\x96\x01\n\x0f\x42igQueryOptions\x12\x42\n\x0ftable_reference\x18\x01 \x01(\x0b\x32).google.privacy.dlp.v2beta2.BigQueryTable\x12?\n\x12identifying_fields\x18\x02 \x03(\x0b\x32#.google.privacy.dlp.v2beta2.FieldId\"\xfe\x01\n\rStorageConfig\x12I\n\x11\x64\x61tastore_options\x18\x02 \x01(\x0b\x32,.google.privacy.dlp.v2beta2.DatastoreOptionsH\x00\x12P\n\x15\x63loud_storage_options\x18\x03 \x01(\x0b\x32/.google.privacy.dlp.v2beta2.CloudStorageOptionsH\x00\x12H\n\x11\x62ig_query_options\x18\x04 \x01(\x0b\x32+.google.privacy.dlp.v2beta2.BigQueryOptionsH\x00\x42\x06\n\x04type\":\n\x0f\x43loudStorageKey\x12\x11\n\tfile_path\x18\x01 \x01(\t\x12\x14\n\x0cstart_offset\x18\x02 \x01(\x03\"C\n\x0c\x44\x61tastoreKey\x12\x33\n\nentity_key\x18\x01 \x01(\x0b\x32\x1f.google.privacy.dlp.v2beta2.Key\"\xc5\x01\n\x03Key\x12=\n\x0cpartition_id\x18\x01 \x01(\x0b\x32\'.google.privacy.dlp.v2beta2.PartitionId\x12\x39\n\x04path\x18\x02 \x03(\x0b\x32+.google.privacy.dlp.v2beta2.Key.PathElement\x1a\x44\n\x0bPathElement\x12\x0c\n\x04kind\x18\x01 \x01(\t\x12\x0c\n\x02id\x18\x02 \x01(\x03H\x00\x12\x0e\n\x04name\x18\x03 \x01(\tH\x00\x42\t\n\x07id_type\"\xa0\x01\n\tRecordKey\x12H\n\x11\x63loud_storage_key\x18\x01 \x01(\x0b\x32+.google.privacy.dlp.v2beta2.CloudStorageKeyH\x00\x12\x41\n\rdatastore_key\x18\x02 \x01(\x0b\x32(.google.privacy.dlp.v2beta2.DatastoreKeyH\x00\x42\x06\n\x04type\"I\n\rBigQueryTable\x12\x12\n\nproject_id\x18\x01 \x01(\t\x12\x12\n\ndataset_id\x18\x02 \x01(\t\x12\x10\n\x08table_id\x18\x03 \x01(\t\">\n\x08\x45ntityId\x12\x32\n\x05\x66ield\x18\x01 \x01(\x0b\x32#.google.privacy.dlp.v2beta2.FieldId*t\n\nLikelihood\x12\x1a\n\x16LIKELIHOOD_UNSPECIFIED\x10\x00\x12\x11\n\rVERY_UNLIKELY\x10\x01\x12\x0c\n\x08UNLIKELY\x10\x02\x12\x0c\n\x08POSSIBLE\x10\x03\x12\n\n\x06LIKELY\x10\x04\x12\x0f\n\x0bVERY_LIKELY\x10\x05\x42\xa3\x01\n\x1e\x63om.google.privacy.dlp.v2beta2B\nDlpStorageP\x01Z=google.golang.org/genproto/googleapis/privacy/dlp/v2beta2;dlp\xaa\x02\x18Google.Cloud.Dlp.V2Beta2\xca\x02\x18Google\\Cloud\\Dlp\\V2beta2b\x06proto3')
  ,
  dependencies=[google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_protobuf_dot_timestamp__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_LIKELIHOOD = _descriptor.EnumDescriptor(
  name='Likelihood',
  full_name='google.privacy.dlp.v2beta2.Likelihood',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LIKELIHOOD_UNSPECIFIED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VERY_UNLIKELY', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNLIKELY', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='POSSIBLE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LIKELY', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VERY_LIKELY', index=5, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1991,
  serialized_end=2107,
)
_sym_db.RegisterEnumDescriptor(_LIKELIHOOD)

Likelihood = enum_type_wrapper.EnumTypeWrapper(_LIKELIHOOD)
LIKELIHOOD_UNSPECIFIED = 0
VERY_UNLIKELY = 1
UNLIKELY = 2
POSSIBLE = 3
LIKELY = 4
VERY_LIKELY = 5



_INFOTYPE = _descriptor.Descriptor(
  name='InfoType',
  full_name='google.privacy.dlp.v2beta2.InfoType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.privacy.dlp.v2beta2.InfoType.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=147,
  serialized_end=171,
)


_CUSTOMINFOTYPE_DICTIONARY_WORDLIST = _descriptor.Descriptor(
  name='WordList',
  full_name='google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.WordList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='words', full_name='google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.WordList.words', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=510,
  serialized_end=535,
)

_CUSTOMINFOTYPE_DICTIONARY = _descriptor.Descriptor(
  name='Dictionary',
  full_name='google.privacy.dlp.v2beta2.CustomInfoType.Dictionary',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='word_list', full_name='google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.word_list', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CUSTOMINFOTYPE_DICTIONARY_WORDLIST, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='source', full_name='google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.source',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=411,
  serialized_end=545,
)

_CUSTOMINFOTYPE_SURROGATETYPE = _descriptor.Descriptor(
  name='SurrogateType',
  full_name='google.privacy.dlp.v2beta2.CustomInfoType.SurrogateType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=547,
  serialized_end=562,
)

_CUSTOMINFOTYPE = _descriptor.Descriptor(
  name='CustomInfoType',
  full_name='google.privacy.dlp.v2beta2.CustomInfoType',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='info_type', full_name='google.privacy.dlp.v2beta2.CustomInfoType.info_type', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dictionary', full_name='google.privacy.dlp.v2beta2.CustomInfoType.dictionary', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='surrogate_type', full_name='google.privacy.dlp.v2beta2.CustomInfoType.surrogate_type', index=2,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CUSTOMINFOTYPE_DICTIONARY, _CUSTOMINFOTYPE_SURROGATETYPE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='google.privacy.dlp.v2beta2.CustomInfoType.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=174,
  serialized_end=570,
)


_FIELDID = _descriptor.Descriptor(
  name='FieldId',
  full_name='google.privacy.dlp.v2beta2.FieldId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.privacy.dlp.v2beta2.FieldId.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=572,
  serialized_end=595,
)


_PARTITIONID = _descriptor.Descriptor(
  name='PartitionId',
  full_name='google.privacy.dlp.v2beta2.PartitionId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='project_id', full_name='google.privacy.dlp.v2beta2.PartitionId.project_id', index=0,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='namespace_id', full_name='google.privacy.dlp.v2beta2.PartitionId.namespace_id', index=1,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=597,
  serialized_end=652,
)


_KINDEXPRESSION = _descriptor.Descriptor(
  name='KindExpression',
  full_name='google.privacy.dlp.v2beta2.KindExpression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='google.privacy.dlp.v2beta2.KindExpression.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=654,
  serialized_end=684,
)


_DATASTOREOPTIONS = _descriptor.Descriptor(
  name='DatastoreOptions',
  full_name='google.privacy.dlp.v2beta2.DatastoreOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition_id', full_name='google.privacy.dlp.v2beta2.DatastoreOptions.partition_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='kind', full_name='google.privacy.dlp.v2beta2.DatastoreOptions.kind', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=687,
  serialized_end=826,
)


_CLOUDSTORAGEOPTIONS_FILESET = _descriptor.Descriptor(
  name='FileSet',
  full_name='google.privacy.dlp.v2beta2.CloudStorageOptions.FileSet',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='url', full_name='google.privacy.dlp.v2beta2.CloudStorageOptions.FileSet.url', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=926,
  serialized_end=948,
)

_CLOUDSTORAGEOPTIONS = _descriptor.Descriptor(
  name='CloudStorageOptions',
  full_name='google.privacy.dlp.v2beta2.CloudStorageOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_set', full_name='google.privacy.dlp.v2beta2.CloudStorageOptions.file_set', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CLOUDSTORAGEOPTIONS_FILESET, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=828,
  serialized_end=948,
)


_BIGQUERYOPTIONS = _descriptor.Descriptor(
  name='BigQueryOptions',
  full_name='google.privacy.dlp.v2beta2.BigQueryOptions',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='table_reference', full_name='google.privacy.dlp.v2beta2.BigQueryOptions.table_reference', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='identifying_fields', full_name='google.privacy.dlp.v2beta2.BigQueryOptions.identifying_fields', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=951,
  serialized_end=1101,
)


_STORAGECONFIG = _descriptor.Descriptor(
  name='StorageConfig',
  full_name='google.privacy.dlp.v2beta2.StorageConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='datastore_options', full_name='google.privacy.dlp.v2beta2.StorageConfig.datastore_options', index=0,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cloud_storage_options', full_name='google.privacy.dlp.v2beta2.StorageConfig.cloud_storage_options', index=1,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='big_query_options', full_name='google.privacy.dlp.v2beta2.StorageConfig.big_query_options', index=2,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='google.privacy.dlp.v2beta2.StorageConfig.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1104,
  serialized_end=1358,
)


_CLOUDSTORAGEKEY = _descriptor.Descriptor(
  name='CloudStorageKey',
  full_name='google.privacy.dlp.v2beta2.CloudStorageKey',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='file_path', full_name='google.privacy.dlp.v2beta2.CloudStorageKey.file_path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_offset', full_name='google.privacy.dlp.v2beta2.CloudStorageKey.start_offset', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1360,
  serialized_end=1418,
)


_DATASTOREKEY = _descriptor.Descriptor(
  name='DatastoreKey',
  full_name='google.privacy.dlp.v2beta2.DatastoreKey',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='entity_key', full_name='google.privacy.dlp.v2beta2.DatastoreKey.entity_key', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1420,
  serialized_end=1487,
)


_KEY_PATHELEMENT = _descriptor.Descriptor(
  name='PathElement',
  full_name='google.privacy.dlp.v2beta2.Key.PathElement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='kind', full_name='google.privacy.dlp.v2beta2.Key.PathElement.kind', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='id', full_name='google.privacy.dlp.v2beta2.Key.PathElement.id', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='google.privacy.dlp.v2beta2.Key.PathElement.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='id_type', full_name='google.privacy.dlp.v2beta2.Key.PathElement.id_type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1619,
  serialized_end=1687,
)

_KEY = _descriptor.Descriptor(
  name='Key',
  full_name='google.privacy.dlp.v2beta2.Key',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partition_id', full_name='google.privacy.dlp.v2beta2.Key.partition_id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='google.privacy.dlp.v2beta2.Key.path', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_KEY_PATHELEMENT, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1490,
  serialized_end=1687,
)


_RECORDKEY = _descriptor.Descriptor(
  name='RecordKey',
  full_name='google.privacy.dlp.v2beta2.RecordKey',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cloud_storage_key', full_name='google.privacy.dlp.v2beta2.RecordKey.cloud_storage_key', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='datastore_key', full_name='google.privacy.dlp.v2beta2.RecordKey.datastore_key', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='google.privacy.dlp.v2beta2.RecordKey.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1690,
  serialized_end=1850,
)


_BIGQUERYTABLE = _descriptor.Descriptor(
  name='BigQueryTable',
  full_name='google.privacy.dlp.v2beta2.BigQueryTable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='project_id', full_name='google.privacy.dlp.v2beta2.BigQueryTable.project_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dataset_id', full_name='google.privacy.dlp.v2beta2.BigQueryTable.dataset_id', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='table_id', full_name='google.privacy.dlp.v2beta2.BigQueryTable.table_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1852,
  serialized_end=1925,
)


_ENTITYID = _descriptor.Descriptor(
  name='EntityId',
  full_name='google.privacy.dlp.v2beta2.EntityId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='field', full_name='google.privacy.dlp.v2beta2.EntityId.field', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1927,
  serialized_end=1989,
)

_CUSTOMINFOTYPE_DICTIONARY_WORDLIST.containing_type = _CUSTOMINFOTYPE_DICTIONARY
_CUSTOMINFOTYPE_DICTIONARY.fields_by_name['word_list'].message_type = _CUSTOMINFOTYPE_DICTIONARY_WORDLIST
_CUSTOMINFOTYPE_DICTIONARY.containing_type = _CUSTOMINFOTYPE
_CUSTOMINFOTYPE_DICTIONARY.oneofs_by_name['source'].fields.append(
  _CUSTOMINFOTYPE_DICTIONARY.fields_by_name['word_list'])
_CUSTOMINFOTYPE_DICTIONARY.fields_by_name['word_list'].containing_oneof = _CUSTOMINFOTYPE_DICTIONARY.oneofs_by_name['source']
_CUSTOMINFOTYPE_SURROGATETYPE.containing_type = _CUSTOMINFOTYPE
_CUSTOMINFOTYPE.fields_by_name['info_type'].message_type = _INFOTYPE
_CUSTOMINFOTYPE.fields_by_name['dictionary'].message_type = _CUSTOMINFOTYPE_DICTIONARY
_CUSTOMINFOTYPE.fields_by_name['surrogate_type'].message_type = _CUSTOMINFOTYPE_SURROGATETYPE
_CUSTOMINFOTYPE.oneofs_by_name['type'].fields.append(
  _CUSTOMINFOTYPE.fields_by_name['dictionary'])
_CUSTOMINFOTYPE.fields_by_name['dictionary'].containing_oneof = _CUSTOMINFOTYPE.oneofs_by_name['type']
_CUSTOMINFOTYPE.oneofs_by_name['type'].fields.append(
  _CUSTOMINFOTYPE.fields_by_name['surrogate_type'])
_CUSTOMINFOTYPE.fields_by_name['surrogate_type'].containing_oneof = _CUSTOMINFOTYPE.oneofs_by_name['type']
_DATASTOREOPTIONS.fields_by_name['partition_id'].message_type = _PARTITIONID
_DATASTOREOPTIONS.fields_by_name['kind'].message_type = _KINDEXPRESSION
_CLOUDSTORAGEOPTIONS_FILESET.containing_type = _CLOUDSTORAGEOPTIONS
_CLOUDSTORAGEOPTIONS.fields_by_name['file_set'].message_type = _CLOUDSTORAGEOPTIONS_FILESET
_BIGQUERYOPTIONS.fields_by_name['table_reference'].message_type = _BIGQUERYTABLE
_BIGQUERYOPTIONS.fields_by_name['identifying_fields'].message_type = _FIELDID
_STORAGECONFIG.fields_by_name['datastore_options'].message_type = _DATASTOREOPTIONS
_STORAGECONFIG.fields_by_name['cloud_storage_options'].message_type = _CLOUDSTORAGEOPTIONS
_STORAGECONFIG.fields_by_name['big_query_options'].message_type = _BIGQUERYOPTIONS
_STORAGECONFIG.oneofs_by_name['type'].fields.append(
  _STORAGECONFIG.fields_by_name['datastore_options'])
_STORAGECONFIG.fields_by_name['datastore_options'].containing_oneof = _STORAGECONFIG.oneofs_by_name['type']
_STORAGECONFIG.oneofs_by_name['type'].fields.append(
  _STORAGECONFIG.fields_by_name['cloud_storage_options'])
_STORAGECONFIG.fields_by_name['cloud_storage_options'].containing_oneof = _STORAGECONFIG.oneofs_by_name['type']
_STORAGECONFIG.oneofs_by_name['type'].fields.append(
  _STORAGECONFIG.fields_by_name['big_query_options'])
_STORAGECONFIG.fields_by_name['big_query_options'].containing_oneof = _STORAGECONFIG.oneofs_by_name['type']
_DATASTOREKEY.fields_by_name['entity_key'].message_type = _KEY
_KEY_PATHELEMENT.containing_type = _KEY
_KEY_PATHELEMENT.oneofs_by_name['id_type'].fields.append(
  _KEY_PATHELEMENT.fields_by_name['id'])
_KEY_PATHELEMENT.fields_by_name['id'].containing_oneof = _KEY_PATHELEMENT.oneofs_by_name['id_type']
_KEY_PATHELEMENT.oneofs_by_name['id_type'].fields.append(
  _KEY_PATHELEMENT.fields_by_name['name'])
_KEY_PATHELEMENT.fields_by_name['name'].containing_oneof = _KEY_PATHELEMENT.oneofs_by_name['id_type']
_KEY.fields_by_name['partition_id'].message_type = _PARTITIONID
_KEY.fields_by_name['path'].message_type = _KEY_PATHELEMENT
_RECORDKEY.fields_by_name['cloud_storage_key'].message_type = _CLOUDSTORAGEKEY
_RECORDKEY.fields_by_name['datastore_key'].message_type = _DATASTOREKEY
_RECORDKEY.oneofs_by_name['type'].fields.append(
  _RECORDKEY.fields_by_name['cloud_storage_key'])
_RECORDKEY.fields_by_name['cloud_storage_key'].containing_oneof = _RECORDKEY.oneofs_by_name['type']
_RECORDKEY.oneofs_by_name['type'].fields.append(
  _RECORDKEY.fields_by_name['datastore_key'])
_RECORDKEY.fields_by_name['datastore_key'].containing_oneof = _RECORDKEY.oneofs_by_name['type']
_ENTITYID.fields_by_name['field'].message_type = _FIELDID
DESCRIPTOR.message_types_by_name['InfoType'] = _INFOTYPE
DESCRIPTOR.message_types_by_name['CustomInfoType'] = _CUSTOMINFOTYPE
DESCRIPTOR.message_types_by_name['FieldId'] = _FIELDID
DESCRIPTOR.message_types_by_name['PartitionId'] = _PARTITIONID
DESCRIPTOR.message_types_by_name['KindExpression'] = _KINDEXPRESSION
DESCRIPTOR.message_types_by_name['DatastoreOptions'] = _DATASTOREOPTIONS
DESCRIPTOR.message_types_by_name['CloudStorageOptions'] = _CLOUDSTORAGEOPTIONS
DESCRIPTOR.message_types_by_name['BigQueryOptions'] = _BIGQUERYOPTIONS
DESCRIPTOR.message_types_by_name['StorageConfig'] = _STORAGECONFIG
DESCRIPTOR.message_types_by_name['CloudStorageKey'] = _CLOUDSTORAGEKEY
DESCRIPTOR.message_types_by_name['DatastoreKey'] = _DATASTOREKEY
DESCRIPTOR.message_types_by_name['Key'] = _KEY
DESCRIPTOR.message_types_by_name['RecordKey'] = _RECORDKEY
DESCRIPTOR.message_types_by_name['BigQueryTable'] = _BIGQUERYTABLE
DESCRIPTOR.message_types_by_name['EntityId'] = _ENTITYID
DESCRIPTOR.enum_types_by_name['Likelihood'] = _LIKELIHOOD

InfoType = _reflection.GeneratedProtocolMessageType('InfoType', (_message.Message,), dict(
  DESCRIPTOR = _INFOTYPE,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Type of information detected by the API.
  
  
  Attributes:
      name:
          Name of the information type.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.InfoType)
  ))
_sym_db.RegisterMessage(InfoType)

CustomInfoType = _reflection.GeneratedProtocolMessageType('CustomInfoType', (_message.Message,), dict(

  Dictionary = _reflection.GeneratedProtocolMessageType('Dictionary', (_message.Message,), dict(

    WordList = _reflection.GeneratedProtocolMessageType('WordList', (_message.Message,), dict(
      DESCRIPTOR = _CUSTOMINFOTYPE_DICTIONARY_WORDLIST,
      __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
      ,
      __doc__ = """Message defining a list of words or phrases to search for in the data.
      
      
      Attributes:
          words:
              Words or phrases defining the dictionary. The dictionary must
              contain at least one phrase and every phrase must contain at
              least 2 characters that are letters or digits. [required]
      """,
      # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CustomInfoType.Dictionary.WordList)
      ))
    ,
    DESCRIPTOR = _CUSTOMINFOTYPE_DICTIONARY,
    __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
    ,
    __doc__ = """Custom information type based on a dictionary of words or phrases. This
    can be used to match sensitive information specific to the data, such as
    a list of employee IDs or job titles.
    
    Dictionary words are case-insensitive and all characters other than
    letters and digits in the unicode `Basic Multilingual
    Plane <https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane>`__
    will be replaced with whitespace when scanning for matches, so the
    dictionary phrase "Sam Johnson" will match all three phrases "sam
    johnson", "Sam, Johnson", and "Sam (Johnson)". Additionally, the
    characters surrounding any match must be of a different type than the
    adjacent characters within the word, so letters must be next to
    non-letters and digits next to non-digits. For example, the dictionary
    word "jen" will match the first three letters of the text "jen123" but
    will return no matches for "jennifer".
    
    Dictionary words containing a large number of characters that are not
    letters or digits may result in unexpected findings because such
    characters are treated as whitespace.
    
    
    Attributes:
        word_list:
            List of words or phrases to search for.
    """,
    # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CustomInfoType.Dictionary)
    ))
  ,

  SurrogateType = _reflection.GeneratedProtocolMessageType('SurrogateType', (_message.Message,), dict(
    DESCRIPTOR = _CUSTOMINFOTYPE_SURROGATETYPE,
    __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
    ,
    __doc__ = """Message for detecting output from deidentification transformations such
    as
    ```CryptoReplaceFfxFpeConfig`` </dlp/docs/reference/rest/v2beta1/content/deidentify#CryptoReplaceFfxFpeConfig>`__.
    These types of transformations are those that perform pseudonymization,
    thereby producing a "surrogate" as output. This should be used in
    conjunction with a field on the transformation such as
    ``surrogate_info_type``. This custom info type does not support the use
    of ``detection_rules``.
    """,
    # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CustomInfoType.SurrogateType)
    ))
  ,
  DESCRIPTOR = _CUSTOMINFOTYPE,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Custom information type provided by the user. Used to find
  domain-specific sensitive information configurable to the data in
  question.
  
  
  Attributes:
      info_type:
          Info type configuration. All custom info types must have
          configurations that do not conflict with built-in info types
          or other custom info types.
      dictionary:
          Dictionary-based custom info type.
      surrogate_type:
          Surrogate info type.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CustomInfoType)
  ))
_sym_db.RegisterMessage(CustomInfoType)
_sym_db.RegisterMessage(CustomInfoType.Dictionary)
_sym_db.RegisterMessage(CustomInfoType.Dictionary.WordList)
_sym_db.RegisterMessage(CustomInfoType.SurrogateType)

FieldId = _reflection.GeneratedProtocolMessageType('FieldId', (_message.Message,), dict(
  DESCRIPTOR = _FIELDID,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """General identifier of a data field in a storage service.
  
  
  Attributes:
      name:
          Name describing the field.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.FieldId)
  ))
_sym_db.RegisterMessage(FieldId)

PartitionId = _reflection.GeneratedProtocolMessageType('PartitionId', (_message.Message,), dict(
  DESCRIPTOR = _PARTITIONID,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Datastore partition ID. A partition ID identifies a grouping of
  entities. The grouping is always by project and namespace, however the
  namespace ID may be empty.
  
  A partition ID contains several dimensions: project ID and namespace ID.
  
  
  Attributes:
      project_id:
          The ID of the project to which the entities belong.
      namespace_id:
          If not empty, the ID of the namespace to which the entities
          belong.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.PartitionId)
  ))
_sym_db.RegisterMessage(PartitionId)

KindExpression = _reflection.GeneratedProtocolMessageType('KindExpression', (_message.Message,), dict(
  DESCRIPTOR = _KINDEXPRESSION,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """A representation of a Datastore kind.
  
  
  Attributes:
      name:
          The name of the kind.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.KindExpression)
  ))
_sym_db.RegisterMessage(KindExpression)

DatastoreOptions = _reflection.GeneratedProtocolMessageType('DatastoreOptions', (_message.Message,), dict(
  DESCRIPTOR = _DATASTOREOPTIONS,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Options defining a data set within Google Cloud Datastore.
  
  
  Attributes:
      partition_id:
          A partition ID identifies a grouping of entities. The grouping
          is always by project and namespace, however the namespace ID
          may be empty.
      kind:
          The kind to process.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.DatastoreOptions)
  ))
_sym_db.RegisterMessage(DatastoreOptions)

CloudStorageOptions = _reflection.GeneratedProtocolMessageType('CloudStorageOptions', (_message.Message,), dict(

  FileSet = _reflection.GeneratedProtocolMessageType('FileSet', (_message.Message,), dict(
    DESCRIPTOR = _CLOUDSTORAGEOPTIONS_FILESET,
    __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
    ,
    __doc__ = """Set of files to scan.
    
    
    Attributes:
        url:
            The url, in the format ``gs://<bucket>/<path>``. Trailing
            wildcard in the path is allowed.
    """,
    # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CloudStorageOptions.FileSet)
    ))
  ,
  DESCRIPTOR = _CLOUDSTORAGEOPTIONS,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Options defining a file or a set of files (path ending with \*) within a
  Google Cloud Storage bucket.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CloudStorageOptions)
  ))
_sym_db.RegisterMessage(CloudStorageOptions)
_sym_db.RegisterMessage(CloudStorageOptions.FileSet)

BigQueryOptions = _reflection.GeneratedProtocolMessageType('BigQueryOptions', (_message.Message,), dict(
  DESCRIPTOR = _BIGQUERYOPTIONS,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Options defining BigQuery table and row identifiers.
  
  
  Attributes:
      table_reference:
          Complete BigQuery table reference.
      identifying_fields:
          References to fields uniquely identifying rows within the
          table. Nested fields in the format, like
          ``person.birthdate.year``, are allowed.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.BigQueryOptions)
  ))
_sym_db.RegisterMessage(BigQueryOptions)

StorageConfig = _reflection.GeneratedProtocolMessageType('StorageConfig', (_message.Message,), dict(
  DESCRIPTOR = _STORAGECONFIG,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Shared message indicating Cloud storage type.
  
  
  Attributes:
      datastore_options:
          Google Cloud Datastore options specification.
      cloud_storage_options:
          Google Cloud Storage options specification.
      big_query_options:
          BigQuery options specification.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.StorageConfig)
  ))
_sym_db.RegisterMessage(StorageConfig)

CloudStorageKey = _reflection.GeneratedProtocolMessageType('CloudStorageKey', (_message.Message,), dict(
  DESCRIPTOR = _CLOUDSTORAGEKEY,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Record key for a finding in a Cloud Storage file.
  
  
  Attributes:
      file_path:
          Path to the file.
      start_offset:
          Byte offset of the referenced data in the file.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.CloudStorageKey)
  ))
_sym_db.RegisterMessage(CloudStorageKey)

DatastoreKey = _reflection.GeneratedProtocolMessageType('DatastoreKey', (_message.Message,), dict(
  DESCRIPTOR = _DATASTOREKEY,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Record key for a finding in Cloud Datastore.
  
  
  Attributes:
      entity_key:
          Datastore entity key.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.DatastoreKey)
  ))
_sym_db.RegisterMessage(DatastoreKey)

Key = _reflection.GeneratedProtocolMessageType('Key', (_message.Message,), dict(

  PathElement = _reflection.GeneratedProtocolMessageType('PathElement', (_message.Message,), dict(
    DESCRIPTOR = _KEY_PATHELEMENT,
    __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
    ,
    __doc__ = """A (kind, ID/name) pair used to construct a key path.
    
    If either name or ID is set, the element is complete. If neither is set,
    the element is incomplete.
    
    
    Attributes:
        kind:
            The kind of the entity. A kind matching regex ``__.*__`` is
            reserved/read-only. A kind must not contain more than 1500
            bytes when UTF-8 encoded. Cannot be ``""``.
        id_type:
            The type of ID.
        id:
            The auto-allocated ID of the entity. Never equal to zero.
            Values less than zero are discouraged and may not be supported
            in the future.
        name:
            The name of the entity. A name matching regex ``__.*__`` is
            reserved/read-only. A name must not be more than 1500 bytes
            when UTF-8 encoded. Cannot be ``""``.
    """,
    # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.Key.PathElement)
    ))
  ,
  DESCRIPTOR = _KEY,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """A unique identifier for a Datastore entity. If a key's partition ID or
  any of its path kinds or names are reserved/read-only, the key is
  reserved/read-only. A reserved/read-only key is forbidden in certain
  documented contexts.
  
  
  Attributes:
      partition_id:
          Entities are partitioned into subsets, currently identified by
          a project ID and namespace ID. Queries are scoped to a single
          partition.
      path:
          The entity path. An entity path consists of one or more
          elements composed of a kind and a string or numerical
          identifier, which identify entities. The first element
          identifies a *root entity*, the second element identifies a
          *child* of the root entity, the third element identifies a
          child of the second entity, and so forth. The entities
          identified by all prefixes of the path are called the
          element's *ancestors*.  A path can never be empty, and a path
          can have at most 100 elements.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.Key)
  ))
_sym_db.RegisterMessage(Key)
_sym_db.RegisterMessage(Key.PathElement)

RecordKey = _reflection.GeneratedProtocolMessageType('RecordKey', (_message.Message,), dict(
  DESCRIPTOR = _RECORDKEY,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Message for a unique key indicating a record that contains a finding.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.RecordKey)
  ))
_sym_db.RegisterMessage(RecordKey)

BigQueryTable = _reflection.GeneratedProtocolMessageType('BigQueryTable', (_message.Message,), dict(
  DESCRIPTOR = _BIGQUERYTABLE,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """Message defining the location of a BigQuery table. A table is uniquely
  identified by its project\_id, dataset\_id, and table\_name. Within a
  query a table is often referenced with a string in the format of:
  ``<project_id>:<dataset_id>.<table_id>`` or
  ``<project_id>.<dataset_id>.<table_id>``.
  
  
  Attributes:
      project_id:
          The Google Cloud Platform project ID of the project containing
          the table. If omitted, project ID is inferred from the API
          call.
      dataset_id:
          Dataset ID of the table.
      table_id:
          Name of the table.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.BigQueryTable)
  ))
_sym_db.RegisterMessage(BigQueryTable)

EntityId = _reflection.GeneratedProtocolMessageType('EntityId', (_message.Message,), dict(
  DESCRIPTOR = _ENTITYID,
  __module__ = 'google.cloud.privacy.dlp_v2beta2.proto.storage_pb2'
  ,
  __doc__ = """An entity in a dataset is a field or set of fields that correspond to a
  single person. For example, in medical records the ``EntityId`` might be
  a patient identifier, or for financial records it might be an account
  identifier. This message is used when generalizations or analysis must
  be consistent across multiple rows pertaining to the same entity.
  
  
  Attributes:
      field:
          Composite key indicating which field contains the entity
          identifier.
  """,
  # @@protoc_insertion_point(class_scope:google.privacy.dlp.v2beta2.EntityId)
  ))
_sym_db.RegisterMessage(EntityId)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\036com.google.privacy.dlp.v2beta2B\nDlpStorageP\001Z=google.golang.org/genproto/googleapis/privacy/dlp/v2beta2;dlp\252\002\030Google.Cloud.Dlp.V2Beta2\312\002\030Google\\Cloud\\Dlp\\V2beta2'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
